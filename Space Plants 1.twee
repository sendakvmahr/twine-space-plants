:: StoryTitle
Space Plants 1


:: StoryData
{
  "ifid": "a39d4033-db33-4cc3-9e10-aa95abfe18de",
  "format": "SugarCube",
  "format-version": "2.36.1",
  "start": "on_planet",
  "tag-colors": {
    "Notes": "red",
    "script-pile": "purple"
  },
  "zoom": 1
}


:: ItemInit [script-pile] {"position":"300,0","size":"100,100"}
<<set setup.items = {
	"sprout_spinach": {
    	display_name: "Spinach Sprout",
        fragility: 0,
        lifespan: 15,
        raw_value: 5,
        description: "A spinach sprout. Takes 2 weeks to grow."
    },
	"mats1": {
    	display_name: "Copper Ore",
        fragility: 0,
        lifespan: -1,
        raw_value: 5,
        description: "Everyone needs this for wires."
    },
	"mats2": {
    	display_name: "Gold Ore",
        fragility: 0,
        lifespan: -1,
        raw_value: 20,
        description: "Everyone needs this for chips."
    },
	"mats3": {
    	display_name: "Platinum Ore",
        fragility: 0,
        lifespan: -1,
        raw_value: 80,
        description: "Used for something in spaceships, but it's mainly valuable."
    },
    "food1": {
        display_name: "Ultra Pasturized Fiber",
        fragility: 0,
        lifespan: -1,
        raw_value: 1,
        description: "A depressing, stable and cheap cube."
    },
    "food2": {
        display_name: "Hard Fruit",
        fragility: .1,
        lifespan: 6,
        raw_value: 5,
        description: "A tough fruit."
    },
    "food3": {
        display_name: "Fresh greens",
        fragility: .2,
        lifespan: 15,
        raw_value: 20,
        description: "The roots are still on!"
    },
    "supplies1": {
        display_name: "Supplies",
        fragility: 0,
        lifespan: -1,
        raw_value: 10,
        description: "Basic necessities for living"
    },
    "supplies2": {
        display_name: "Indulgences",
        fragility: 0,
        lifespan: -1,
        raw_value: 20,
        description: "Ice cream increases morale and productivity by 20%, even if freeze dried."
    },
    "supplies3": {
        display_name: "Luxuries",
        fragility: 0,
        lifespan: -1,
        raw_value: 80,
        description: "The unboxing is part of the experience."
    },
    "nutes1": {
        display_name: "Nutrients",
        fragility: 0,
        lifespan: -1,
        raw_value: 10,
        description: "Plant nutrients. Not human food."
    },
    "seeds_spinach0": {
        display_name: "Spinach",
        fragility: 0,
        lifespan: -1,
        raw_value: 5,
        description: "An old gag gift. But in the right conditions, they'd take a 3 weeks to turn into baby spinach."
    },
    "substrate1": {
        display_name: "Sand",
        fragility: 0,
        lifespan: -1,
        raw_value: 5,
        description: "Nutrionless sand."
    },
    "chem1": {
        display_name: "Solvents",
        fragility: 0,
        lifespan: -1,
        raw_value: 5,
        description: "Important for cleaning and mixing."
    },
    "chem2": {
        display_name: "Polymers",
        fragility: 0,
        lifespan: -1,
        raw_value: 30,
        description: "It's plastic."
    },
    "chem3": {
        display_name: "Volatiles",
        fragility: .5,
        lifespan: -1,
        raw_value: 120,
        description: "Not particularly useful, but not for the ill-equipped cargo ships."
    }
}>>


:: PassageHeader [script-pile] {"position":"200,275","size":"100,100"}
<<include 'util'>>
<div id="header">
  <div>
    Money: $money
    <<if isPastTag("dead_raw_dead")>>Seeds: <<= dispArr($seeds) >>
    <</if>>\
    [[Cargo|inventory_view]]: <<if $cargo.length is 0>>\
        Empty (0/$max_cargo)
    <<else>>\
        <<= dispArr($cargo)>> ($cargo.length/$max_cargo)
    <</if>>\
    <<set _disp_location = disp($location[0]) >>\
    <<if $location[1] <= 0 >>\
        [[Location|on_planet]]: <<details_link _disp_location $location[0]>>
    <<elseif $location[1] == 1>>\
        [[Location|ship]]: Reaching <<details_link _disp_location $location[0]>> tomorrow.
    <<else>>\
        [[Location|ship]]: $location[1] days away from <<details_link _disp_location $location[0]>>
    <</if>>\
    Fuel: <<if $fuel>>Full<<else>>Empty<</if>>
  </div><div id="settings">
      <span id="toggle-descs"><<link "Toggle Compact View">><</link>></span>
  </div>
</div>
<<if $daily_reports.length != 0>>\
	Daily reports: 
    <<= $daily_reports.join("<br>") >>
	<<set $daily_reports = []>>
<</if>>\


:: PlanetInit [script-pile] {"position":"400,100","size":"100,100"}
<<set $planets to {
	"raw": {
    	display_name: "Persephone",
    	location: 0,
        demand: {
        	"food1": 0,
        	"food2": 1,
        	"food3": 2,
        	"supplies1": 2,
        	"supplies2": 1.5,
        	"supplies3": 1,
        	"chem1": 2,
        	"chem2": 1,
        	"chem3": 2,
        	"nutes1": 1,
        },
        stock: ["mats1", "mats2", "mats3", "food1", "substrate1"]
    },
    "mfg": {
    	display_name: "Svarog",
    	location: 5,
        demand: {
        	"mats1": 0,
        	"mats2": 0,
        	"mats3": 0,
        	"food1": 1,
        	"food2": 1,
        	"food3": 2,
        	"seeds_spinach0": 0,
        	"substrate1": 0,
        },
        stock: ["supplies1", "supplies2", "supplies3", "chem1", "chem2", "chem3", "nutes1"]
    },
   "tourism":{
    	display_name: "Horai",
    	location: 10,
        demand: {
        	"mats1": 2,
        	"mats2": 2,
        	"mats3": 2,
        	"food1": 1,
        	"food2": 2,
        	"food3": 2,
        	"supplies1": 2,
        	"supplies2": 1.5,
        	"supplies3": 1,
        	"chem1": 2,
        	"chem2": 2,
        	"chem3": 2,
        	"nutes1": 2,
        	"substrate1": 0.5,
        },
        stock: []
    },
    "dead_raw":{
    	display_name: "Elysium",
    	location: 10,
        demand: {
        	"mats1": 0,
        	"mats2": 0,
        	"mats3": 0,
        	"supplies1": 2,
        	"supplies2": 1.5,
        	"supplies3": 1,
        	"chem1": 2,
        	"chem2": 1,
        	"chem3": 2,
        	"nutes1": 3,
        	"substrate1": 3,
        },
        stock: ["food1", "food2", "food3"]
    }
}>>


:: StoryInit [script-pile] {"position":"200,100","size":"100,100"}
<<include "ItemInit">>
<<include "TermInit">>
<<include "PlanetInit">>
<<set $seeds = ["seeds_spinach0"]>>
<<set $cargo = []>>
<<set $max_cargo to 8>>
<<set $money to 200>>
<<set $fuel to true>>
<<set $location to ["dead_raw", 0] >>
<<set $planet = $location[0]>>
<<set $desc_planet = $location[0]>>
<<set $currency = ["money", "monies"]>>
<<set $news to 0>>
<<set $action_count to 7>>
<<set $max_actions to 7>>
<<set $daily_reports to []>>
<<set $story_tags = []>>
<<set $story_tags = ["dead_raw_dead"]>>
<<inventoryAdd "nutes1">>
<<inventoryAdd "substrate1">>
<<inventoryAdd "food1">>
<<inventoryAdd "food1">>
<<inventoryAdd "food2">>
<<inventoryAdd "food2">>
<<inventoryAdd "food3">>
<<inventoryAdd "food3">>
/%
<<include "util">>

<<inventoryAdd "nutes1")>>
<<inventory_add "substrate1">>

<<set $story_tags = ["dead_raw_dead"]>>
<<inventory_add "food1">>
<<inventory_add "food1">>
<<inventory_add "food2">>
<<inventory_add "food2">>
<<inventory_add "food3">>
<<inventory_add "food3">>%/


:: TermInit [script-pile] {"position":"300,100","size":"100,100"}
/*For all the terms I am sure I will replace a few times b/c I can't make up my mind*/
<<set setup.terms = {
	"alien": {
    	"empire": "Breen",
     }
} >>


:: dead_raw_dead {"position":"800,475","size":"100,100"}
<<set $story_tags to $story_tags.concat("dead_raw_dead")>>\
<<= disp("dead_raw")>> has been attacked and destroyed by the <<= setup.terms["alien"]["empire"]>> Empire. Food shortages are expected, as <<print disp("dead_raw")>> was the primary provide of food in this solar system. Cargo ships that were heading towards <<print disp("dead_raw")>> are advised to stop by <<print disp("raw")>> to refuel and pick up food supplies for other planets. 

<<linkreplace "Huh. Someone I knew was on that planet.">>\
Their dream was to *eventually build space stations that could make each planet largely independent with its own facilities for food, manufacturing, etc. so that trade between planets was primarily for demand for raw materials and thing that took lots of skill to make*

I wasn't weren't fond of their enthusiasm to destroy my livelihood. But they were a good source of information, and willing to explain anything I asked about, along with information I didn't think I'd need to know about. 

Like how sand, nutrients, and seeds were all it took to grow food in space. And how <<= disp("mfg")>> was the main source of those supplies.

Maybe it would be better go there instead. 

<<set _display = "Go to " + disp("mfg")>>\
<<link _display ship>>\
	<<set $location = ["mfg", either(17, 21, 25)]>>\
<</link>>
<<set _display = "Go to " + disp("raw")>>\
<<link _display ship>>\
	<<set $location = ["raw", either(17, 21, 25)]>>\
<</link>>
<</linkreplace>>



:: depart_prepare {"position":"425,600","size":"100,100"}
<<include "util">>\
<<if not $fuel>>\
	Can't leave the planet without fuel.
<<else>>\
	Choose a planet.
	<<set _planet_names to Object.keys($planets)>>\
  	<<for _i = 0; _i < _planet_names.length; _i++>>\
        <<set _raw_name = _planet_names[_i] >>\
        <<capture _raw_name >>\
        	<<set _display = disp(_raw_name) >>\
	        <<if _raw_name == "dead_raw" and isPastTag("dead_raw_dead")>>\
		        <<= _display >>\
        	<<elseif  _raw_name == $location[0]>>\
	        	<<= _display>>, (Here)\
        	<<else>>\
	        	<<link _display ship>>\
        			<<set $location = [_raw_name, either(17, 21, 25)]>>\
	        	<</link>>\
	        <</if>>\
		<</capture>>\
        <a class="detail-link" @data-item="_raw_name" href="#">(Details)</a>
	<</for>>\
<</if>>\
<<return>>

<div id="planet-desc"></div>

/*[[ship]]
[[planet_description]]*/


<<script>>
  $(document).on(':passagedisplay', (ev) => {
  	$(".detail-link").click((ev) => {
    	State.variables.desc_planet = ev.target.attributes["data-item"].value;
        setPageElement("planet-desc", "planet_description");
    })
  });
<</script>>



:: inventory_view {"position":"200,700","size":"100,100"}
<<include "util">>\
<div id="inventory_grid"></div>
<div id="hover-description">Mouse over item for a description.</div>
Fragility: How likely something is to break every week in transit.
Base Value: Base value of item.
Lifespan: How many weeks this can spend in transit before becoming worthless.
<<plant_management_menu>>
<<return>>


:: notes [Notes] {"position":"200,500","size":"100,100"}
Text in asterisks is my textbarf with no editing/thought, so it needs to be edited pretty heavily
Todo:
	Refactor:
        passages	
            inventory_view (upgrade to allow for moving items as well)
	Horai sells imported candy
    	max 2 sales per planet
    Dispose button - costs money, but can clear a slot in inventory
    Freelance as a local with some grindiness, or beg
  
convert week count to days
decaying of items, and fragile items breaking

random events

you wanted to travel in space. space is a lot of empty, seeing the cool stuff in space is expensive. most of your time in space is spent asleep. 


Music notes if I want to cmopose stuff later
	Dubmood cydonian sky 2
    Surprisingly, Start of a New Trial apollo Justice
    SOM2 - the way this person rearranged everything
        I think I like the use of flutes/harp/slower paced 
        I don't think this wants to be chiptuney actually
    


:: npc_list {"position":"500,300","size":"100,100"}
I don't have npcs implemented yet. 
<<return>>


:: on_planet {"position":"300,400","size":"100,100"}
<<if isPastTag("dead_raw_dead")>>\
	With the destruction of <<= disp("dead_raw") >>, you might be able to make more monies and upgrade your ship. 
<<else>>
	You run a cargo ship. It's a simple job - buy cheap stuff from one planet, sell it to another planet that needs it and will pay more for it.
<</if>>\
<<set _link_desc = disp($location[0]) >>\
You are currently on <<link _link_desc planet_description>>\
	<<set $desc_planet =$location[0]>>\
<</link>>.
[[Visit the market|shop]]
[[Depart|depart_prepare]]
[[Look around.|npc_list]]
/%
<<if $money >= 50 and $story_point >=1 >>\
	<<link "Stay for a while (Passes a week, costs 50 monies)" "on_planet">>\		
    	<<update_weekly>><<set $money = $money -50>>\
    <</link>>
<</if>>
%/
/*[[planet_description]]*/


:: planet_description {"position":"300,600","size":"100,100"}
<<include "sales">>\
Planet name: <<print $planets[$desc_planet].display_name>>
<<if $desc_planet == "raw">>\
	This planet exports raw materials.\
<<elseif $desc_planet == "mfg">>
	This planet imports metals and exports chemicals and supplies.
<<elseif $desc_planet == "tourism">>\
	This planet recieves lots of money from tourists, but does not produce any goods.
<<elseif $desc_planet == "dead_raw">>\
	This is an agricultural planet. Imports supplies and chemicals, exports food. 
    <<if $story_point >=1>>It has been blown up.<</if>>
<</if>>
<<if !isPastTag("dead_raw_dead") or $desc_planet != "dead_raw">>\
	<<salesInterface false>>
<</if>>

<<return>>



:: sales [script-pile] {"position":"700,100","size":"100,100"}
<<nobr>>
  <<widget 'sell_link'>>
    <<set _item = _args[0]>>
    <<set _planet = _args[1]>>
    <<set _use_links = _args[2]>>
    <<set _cost = Math.floor(setup.items[_args[0]].raw_value * $planets[_planet].demand[_item])>>
    <<capture _cost _item>>
      <<set _link_text = "<span class='itemName'>" + setup.items[_item].display_name >> 
      <<set _link_text = _link_text + "</span><span class='itemCost'>" + _cost + " " +  $currency[1] + "</span>">>
      <<if _cost > 0>>
		<div class="itemHover" @data-name="_item">
          <<if $cargo.findIndex((x) => x.name === _item) != -1 and _use_links>>
              <<link _link_text shop>>
                <<inventoryPop _item>>
                <<if $planets[_planet].demand[_item] * .8 < 1>>
                  $planets[_planet].demand[_item] = 1
                <<else>>
                  $planets[_planet].demand[_item] = $planets[_planet].demand[_item] * .8
                <</if>>
                <<set $money = $money + _cost>>
              <</link>>
          <<else>>
            <span class="disabled"> _link_text</span>
        <</if>>
            </div>
          <span class="desc">
            <br>
            <<= desc(_item) >>
          </span>
        <br>
      <</if>>
    <</capture>>
  <</widget>>
  
  <<widget 'buy_link'>>
    <<set _item = _args[0]>>
    <<set _planet = _args[1]>>
    <<set _use_links = _args[2]>>
    <<set _cost = setup.items[_item].raw_value>>
    <<capture _cost _item>>
      <<set _link_text = "<span class='itemName'>" + setup.items[_item].display_name>>
      <<set _link_text = _link_text + "</span><span class='itemCost'>" + _cost + " " + $currency[1] + "</span>">>
	  <div class="itemHover" @data-name="_item">
        <<if $money >= _cost and $cargo.length < 8 and _use_links>>\
          <<link _link_text shop>>
          <<inventoryAdd _item>>
          <<set $money = $money - _cost>>
          <</link>>
        <<else>>
          <span class="disabled"> _link_text</span>
        <</if>>
      </div>
          <span class="desc">
            <br>
            <<= desc(_item) >>
          </span>
          <br>
    <</capture>>
  <</widget>>

  <<widget "salesInterface">>
  	<<set _allow_sales = _args[0]>>
    <<if _allow_sales >>
    	<<set _sell_string = "Sell">>
    	<<set _buy_string = "Buy">>
    <<else>>
    	<<set _sell_string = "Will Buy (Estimated)">>
    	<<set _buy_string = "Will Sell (Estimated)">>
    <</if>>
    <div class="sales-interface">
      <div>
        <h4 style="margin: 0"><<=_sell_string>></h4>
        <<set _sell_set = Object.keys($planets[$location[0]].demand)>>
        <<for _i = 0; _i < _sell_set.length; _i++>>
          <<sell_link _sell_set[_i] $location[0] _allow_sales>>
        <</for>>
      </div>
      <div>
        <h4 style="margin: 0"><<=_buy_string>></h4>
        <<set _stock = $planets[$location[0]].stock>>
        <<for _i = 0; _i < _stock.length; _i++>>
          <<buy_link _stock[_i] $location[0] _allow_sales>>
        <</for>>
      </div>
    </div>
	<div id="hover-description">Mouse over item for a description.</div>
  <</widget>>
<</nobr>>


:: ship {"position":"600,600","size":"100,100"}
You are sitting on your ship. 
<<if $location[0] == "dead_raw" and $location[1] <= 10>>\
  An emergency [[news|dead_raw_dead]] announcement has been sent out.
<<else>>\
  [[Listen to the news|space_updates]]
  [[Manage your cargo|inventory_view]]
  <<link "Sleep normally (advance 1 day)" ship>><<set $location[1] = $location[1] -1>><<passTime 1>><</link>>
    <<if $location[1] > 7>>\
    <<link "Go to cryosleep (advance 1 week)" ship>>\
      <<set $location[1] = $location[1] -7>>\
      <<passTime 7>>
    <</link>>
  <<else>>\
    <<link "Go to cryosleep (land on planet)" on_planet>>\
      <<set $location[1] = 0>>\
      <<set $fuel to false>>\
      <<passTime $location[1]>>\
    <</link>>
  <</if>>\
<</if>>\

/*
[[ship]][[on_planet]]
*/


:: shop {"position":"650,450","size":"100,100"}
<<include "sales">>\
<<salesInterface true>>
<<if !$fuel>>\  /* refueling */
  <h4 style="margin: 0"> Refuel </h4>\
  <<set _fuel_cost = 10>>\
  <<set _link_text = "Refuel for " + _fuel_cost + " monies.">>\
  <<link _link_text shop>>\
    <<set $fuel to true>>\
    <<set $money = $money - _fuel_cost>>\
  <</link>>
<</if>>\

<<return>>


:: space_updates {"position":"800,600","size":"100,100"}
<<set _updates = {
  "default": [
    "Dissolved " + disp(either(Object.keys(setup.items))) + " trends on " + disp("tourism") + ", leading to a shortage of solvents and an increase in hospistal visits.",
    "Static. You wish you could splurge on a music player for your ship.",
    "You listen to a soda advertisement for several minutes before shutting it off.",
    "Shipping companies complain about lack of workers, and workers continue to complain about lack of holidays.",
    "Recreational use of volatile chemicals on " + disp("tourism") + " continues to draw derision from " + disp("raw") + ".",
    "Silence. Nobody's out there today." 
  ],
  "dead_raw_dead": [
    "Is that an alien ship? Maybe it's best to stay quiet and sleep.",
    either(6, 7, 8) + " ships have been lost in the ongoing conflicts against the aliens.",
  ]
}
>>\
<<if isPastTag("dead_raw_dead")>>\
	<<= either(_updates["dead_raw_dead"].concat(_updates["default"])) >>
<<else>>\
	<<= either(_updates["default"]) >>
<</if>>\

<<return>>


:: util [script-pile] {"position":"600,100","size":"100,100"}
<<nobr>>  
  <<widget 'details_link'>>
  	<<set _text = _args[0] >>
  	<<set _planet = _args[1] >>
    <<capture _planet _text >>
    	<<link _text planet_description>><<set $desc_planet = _planet>><</link>>
     <</capture>>
  <</widget>>
 
   <<widget "plant_management_menu">>
    <<if $story_tags.includes("dead_raw_dead")>>
      <<set _display_text = "Use 1 Sand and 1 Nutrients to start a plant. Takes 2 weeks to grow.">>
      <<if $cargo.findIndex((x) => x.name === "substrate1") != -1 and $cargo.findIndex((x) => x.name === "nutes1") != -1 and $location[1] > 0>>
        <<link _display_text inventory_view>>
          <<passTime 1>>
          <<set $location[1] = $location[1] -1>>
          <<inventoryPop "substrate1">>
          <<inventoryPop "nutes1">>
          <<inventoryAdd "sprout_spinach">>
        <</link>>
        <<else>>
        <span class="disabled"><<=_display_text>></span>
      <</if>>
    <</if>>
  <</widget>>
 <</nobr>>


:: StoryScript [script]
// Display
window.disp = (object) => {
  if (State.variables.planets.hasOwnProperty(object)) {
    return State.variables.planets[object].display_name;
  }
  return setup.items[object].display_name;
}

window.dispArr = (arr) => {
  if (arr[0].hasOwnProperty("display_name")) {
    return arr.map((x) => x.display_name).join(", ");
  }
  return arr.map((x) => window.disp(x)).join(", ");
}

window.desc = (object) => {
  if (State.variables.planets.hasOwnProperty(object)) {
    return "Todo - migrate planet descriptions";
    //return State.variables.planets[object].display_name;
  }
  return setup.items[object].description;  
}


// Story handiness
window.isPastTag = (storyTag) => {
  return State.variables.story_tags.includes(storyTag);
}

// Inventory
window.inventoryPop = (toPop) => {
  if (typeof(toPop) === "string") {
    toPop = State.variables.cargo.findIndex(
      (x) => x.name === toPop
    );
  } else if (typeof(toPop) !== "number") {
    throw new Error(
      "Incorrect parameter for inventoryPop " + toPop.toString()
    );
  }
  State.variables.cargo.splice(toPop, 1);
}

window.inventoryAdd = (toAdd) => {
  if (!setup.items.hasOwnProperty(toAdd)) { 
    throw new Error("You made a typo : " + toAdd.toString()) 
  }
  let item = (Object.assign({}, setup.items[toAdd]));
  item.name = toAdd;
  State.variables.cargo.push(item);
}

window.inventoryClean = () => {
  let isDead = (x) => x.lifespan === 0;
  let index = State.variables.cargo.findIndex(isDead);
  for (let i=0; i < State.variables.max_cargo; i++) {
    if (index !== -1) {
      State.variables.cargo.splice(index, 1);
      index = State.variables.cargo.findIndex(isDead);
    }
  }
}

// Time passage/updates
window.passTime = (days) => {
  let planets = Object.keys(State.variables.planets);
  for (let d=0; d<days; d++) {
    // Update planetary demands
    for (let p=0; p<planets.length; p++) {
      let planet = planets[p];
      let demandList = Object.keys(
        State.variables.planets[planet].demand
      );
      for (let dmd=0; dmd<demandList.length; dmd++){
        let item = demandList[dmd];
        window._updateItemDemand(planet, item);
      }
    }
    // Cargo updates
    for (let c=0; c<State.variables.cargo.length; c++) {
      let wasBroken = false;
      if (Math.random() <= State.variables.cargo[c].fragility) {
        State.variables.cargo[c].lifespan = 0;
        wasBroken = true;
      }
      if (State.variables.cargo[c].lifespan > 0) {
        State.variables.cargo[c].lifespan -= 1;
      }
      if (State.variables.cargo[c].lifespan === 0) {
        let name = window.disp(State.variables.cargo[c].name)
        if (State.variables.cargo[c].name.includes("sprout")) {
          window.inventoryAdd("food3");
          window.inventoryAdd("substrate1");
          State.variables.daily_reports.push("A " + name + " has finished growing." );
        } else if (wasBroken) {
          State.variables.daily_reports.push("A " + name + " has been damaged during turbulence.");
        } else {
          State.variables.daily_reports.push("A " + name + " has gone bad.");
        }
      }
    }
    window.inventoryClean();
  }
}

window.randChoice = (arr) => {
  // Let's see if this works better than either?
  return arr[Math.floor(Math.random() * arr.length)];
}

window.addStorTag = (tag) => {
  if (State.variables.story_tags.includes(tag)) {
	  State.variables.story_tags;
  }
}

window._updateItemDemand = (planet, item) => {
  let weight = 1;
  if (item.contains("food") && window.isPastTag("dead_raw_dead")) {
    weight = window.randChoice([1, 1.2, 1.3, 1.4, 1.5]);
  } else {
    weight = window.randChoice([.7, .8, .9, 1, 1.1, 1.2, 1.3]);
  }
  let demand = State.variables.planets[planet].demand[item];
  if (demand * weight < 1 && demand !== 0) {
    State.variables.planets[planet].demand[item] = 1;
  } else {
    State.variables.planets[planet].demand[item] = demand * weight;
  }
}

// Actual onrender JS

$(document).on(':passagedisplay', function (eventObject) {
  // settings
  $('#toggle-descs').click(() => {
    $("#story").toggleClass("compact");
  });
  // inventory grid
  let inventoryGrid = $("#inventory_grid");
  if (inventoryGrid) {
    for (let c=0; c < State.variables.cargo.length; c++) {
      let cargoItem = State.variables.cargo[c];
      let toAppend = $("<div class='itemHover' data-name='" + cargoItem.name + "'></div>");
      let stats = $("<div class='stats'></div>");
      stats.append($("<p>Fragility: " + cargoItem.fragility + "</p>"));
      stats.append($("<p>Base Value: " + cargoItem.raw_value + "</p>"));
      stats.append($("<p>Lifespan: " + ((cargoItem.lifespan === -1) ? "Infinite" : cargoItem.lifespan) + "</p>"));
      toAppend.append($("<div class='name'>" + cargoItem.display_name + "</div>"));
      toAppend.append(stats);
      toAppend.append($("<div class='desc'>" + cargoItem.description + "</div>"));
      inventoryGrid.append(toAppend);
    }
  }
  
  // shop widget and inventory grid
  let hoverDesc = $("hover-description");
  if (hoverDesc) {
    // idk why but jquery doesn't seem to like modern () => syntax
    $("div.itemHover").hover(
      function() {
        $("#hover-description").html(window.desc($(this).data("name")));
      }, function() {
        $("#hover-description").html("Mouse over item for a description.");
      }
    );
  }
});

// Repetitive Macro stuff

Macro.add('inventoryAdd', {
  handler : function () {
    window.inventoryAdd(this.args[0]);
  }
});

Macro.add('inventoryPop', {
  handler : function () {
    window.inventoryPop(this.args[0]);
  }
});

Macro.add('desc', {
  handler : function () {
    window.desc(this.args[0]);
  }
});

Macro.add('passTime', {
  handler : function () {
    window.passTime(this.args[0]);
  }
});

Macro.add('displayInventoryGrid', {
  handler : function () {
    window.displayInventoryGrid();
  }
});

:: StoryStylesheet [stylesheet]
.disabled { color: darkgrey; }
.detail-link.link-external::after { content: none; }
#header {
  display: flex;
  justify-content: space-between;
  border-bottom: 1px solid white;
  margin-bottom: 20px;
  padding-bottom: 20px;
}
#header>br { display: none; }
#header div { width: 100%; }
#header #settings { text-align: right; }
.desc {
  color: grey;
  padding-left: 20px;
}

#story.compact .desc{ display: none; }
.compact .sales-interface div>span, .compact .sales-interface div>a {
  display: block;
  border-bottom: 1px dotted white;
}
.sales-interface br {
  display: none;
}
.compact .sales-interface {
  display: flex;
}
.compact .sales-interface > div {
  width: 100%;
  padding: 0 20px;
}

.sales-interface div .desc  {
  display: block;
  border-bottom: 1px dotted white;  
}
.sales-interface h4 {
  float: none;
  background: #AAA;
  color: black;
  padding-left: 10px;
  left: -10px;
  width: calc(100% + 10px);
  position: relative;
}

.itemCost {
  float: right;
}
#inventory_grid {
  display: grid;
  grid-template-columns: repeat(4, 25% [col-start]);
  grid-template-rows: 1fr 1fr;
  width: 100%;
  min-height: 200px;
  border: 1px solid white;
}
#inventory_grid br { display: none !important;}
#inventory_grid > div {
  border: 1px solid grey; 
  text-align: center; 
  padding-top: 10px;
}
.hidden { display: none; }

/*
mats
food
supplies
nutes1
seeds_spinach0
substrate1
chem
*/